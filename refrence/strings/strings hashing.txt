const int N = 1e6 + 100, p = 31;
const ll mod = 1e9 + 7;
ll P = 31LL, pwP[2][N], invP[2][N];
ll hsh[2][N], MOD[] = { 1000000007LL, 1000000009LL };
ll modx(ll base, ll ex, ll m)
{
	ll ans = 1LL;
	while (ex > 0LL)
	{
		if (ex & 1LL)
			ans = (ans*base) % m;
		base = (base*base) % m;
		ex = ex >> 1LL;
	}
	return ans;
}

void pre()
{
	invP[0][0] = invP[1][0] = pwP[0][0] = pwP[1][0] = 1LL;
	for (int i = 0; i<2; i++)
	{
		invP[i][1] = modx(P, MOD[i] - 2LL, MOD[i]);
		pwP[i][1] = P;
	}
	for (int i = 2; i<N; i++)
	{
		for (int j = 0; j<2; j++)
		{
			pwP[j][i] = (pwP[j][i - 1] * P) % MOD[j];
			invP[j][i] = (invP[j][i - 1] * invP[j][1]) % MOD[j];
		}
	}
	return;
}

void calc_hsh(string t)
{
	hsh[0][0] = hsh[1][0] = 0LL;
	for (int i = 1; i <= t.size(); i++)
		for (int j = 0; j<2; j++)
			hsh[j][i] = (hsh[j][i - 1] + (t[i - 1] - 'a' + 1LL)*pwP[j][i - 1]) % MOD[j];

}

pair<ll,ll> sub_hsh(int l, int r)
{
	pair<ll,ll> ans;
	ans.first = ((hsh[0][r] - hsh[0][l - 1] + 2LL * MOD[0])*invP[0][l - 1]) % MOD[0];
	ans.second = ((hsh[1][r] - hsh[1][l - 1] + 2LL * MOD[1])*invP[1][l - 1]) % MOD[1];
	return ans;
}