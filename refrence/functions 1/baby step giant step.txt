// to find x in a^x=b mod(m)
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include<iostream>
#include<map>
#include<cmath>
#include<algorithm>
#include<string>
#include<set>
#include<sstream>
#include<vector>
#include<string.h>
#include<queue>
#include<list>
#include<iterator>
#include<functional> 
#include<iomanip>
#include<bitset>
#include<stack>
#include <assert.h>
#include<complex>
#define ll long long
#define ld long double
#define ull unsigned ll 
#define endl '\n'
#define mk make_pair
const double PI = acos(-1.0);
using namespace std;
void fast_in_out() {
	std::ios_base::sync_with_stdio(NULL);
	cin.tie(NULL); cout.tie(NULL);
}
void pause() {
#ifndef ONLINE_JUDGE
	system("pause");
#endif
}
int dx[] = { -1,0,1,0,-1,1,-1,1 };
int dy[] = { 0,-1,0,1,1,1,-1,-1 };
ll a, b, m;
long long fast_power(long long base, long long power) {
	long long result = 1;
	while (power > 0) {

		if (power & 1) {
			result = (result*base) % m;
		}
		base = (base * base) % m;
		power >>= 1;
	}
	return result;
}
/*
Time Complexity = O(log N)
*/
int main() {
	fast_in_out();
	cout << fixed << setprecision(6);
	//freopen("knights.in", "r", stdin);
	//freopen("","w",stdout);
	int t; scanf("%d", &t);
	while (t--)
	{
		scanf("%I64d %I64d %I64d", &a, &b, &m);
		ll n = sqrt(m)+1;
		ll ax = 1;
		map<ll, ll>mp;
		for (ll i = n; i >0; i--) 
			mp[fast_power(a,i*n)] = i;
		ll ans;
		for (ll i = 0; i < n; i++)
		{
			ll num = fast_power(a, i)*b;
			num %= m;
			if (mp.find(num) != mp.end())
			{
				ans = mp[num] * n - i;
				if (ans < m)
					break;
			}
		}
		if (!a && !b)ans = 1;
		if (b == 1)ans = 0;
		printf("%I64d\n", ans);

	}


	pause();
	return 0;
}