vector<int> prime;
bool mark[limit + 1];
void simpleSieve(int limit)
{
	memset(mark, true, sizeof(mark));
	for (int p = 2; p*p<limit; p++)
	{
		if (mark[p])
		{
			for (int i = p * 2; i<limit; i += p)
				mark[i] =0;
		}
	}
	for (int p = 2; p<limit; p++)
		if (mark[p])
			prime.push_back(p);
}
void segmentedSieve(int n)
{
	int limit = floor(sqrt(n)) + 1;
	simpleSieve(limit, prime);
	int low = limit;
	int high = 2 * limit;
	while (low < n)
	{
		memset(mark, true, sizeof(mark));
		for (int i = 0; i < prime.size(); i++)
		{
			int loLim = floor(low / prime[i]) * prime[i];
			if (loLim < low)
				loLim += prime[i];
			for (int j = loLim; j<high; j += prime[i])
				mark[j - low] = false;
		}

		// Numbers which are not marked as false are prime
		for (int i = low; i<high; i++)
			if (mark[i - low] == true)
				cout << i << "  ";

		// Update low and high for next segment
		low = low + limit;
		high = high + limit;
		if (high >= n) high = n;
	}
}