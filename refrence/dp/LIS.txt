// Returns the length of the longest increasing subsequence of the array.
// O(n.log(n))
const int N = 2e5 + 100;
int n, a[N];
int getLIS() {
	int len = 0;
	vector<int> LIS(n, 1e9);
	for (int i = 0; i < n; ++i) {
		// To get the length of the longest non decreasing subsequence
		// replace function "lower_bound" with "upper_bound" 
		int idx = upper_bound(LIS.begin(), LIS.end(), a[i]) - LIS.begin();
		LIS[idx] = a[i];
		len = max(len, idx);
	}
	return len + 1;
}