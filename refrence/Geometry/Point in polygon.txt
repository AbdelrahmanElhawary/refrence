#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
template<class T>
istream& operator>> (istream& is, complex<T>& p) {
	T value;
	is >> value;
	p.real(value);
	is >> value;
	p.imag(value);
	return is;
}
#define ll long long
#define ld long double
#define ull unsigned ll
#define endl '\n'
#define mk make_pair
#define pll pair<ll,ll>
#define F first
#define S second
#define sz(a) ((int)(a).size())
#define all(n) (n).begin(), (n).end()
#define EPS 1e-9
#define OO 1e9
#define point complex<ld>
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((long double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a)  (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))
#define colliner pointOnLine
enum STATE {
	IN, OUT, BOUNDRY
};
const double PI = acos(-1.0);
void fast_in_out() {
	std::ios_base::sync_with_stdio(NULL);
	cin.tie(NULL); cout.tie(NULL);
}
void pause() {
#ifndef ONLINE_JUDGE
	system("pause");
#endif
}
bool intersect(const point &a, const point &b, const point &p, const point &q, point &ret) { 
 //handle degenerate cases 
 ld d1 = cross(p - a, b - a); 
 ld d2 = cross(q - a, b - a);
 ret = (d1 * q - d2 * p) / (d1 - d2);
 if (fabs(d1 - d2) > (1e-9))
	return 1;
 return 0;
 }
bool pointOnLine(const point& a, const point& b, const point& p) {
	return fabs(cross(vec(a, b), vec(a, p))) < EPS;
}
inline bool pointOnRay(point a, point b, point p) {
	return dot(vec(a, b), vec(a, p)) > -EPS && pointOnLine(a, b, p);

}
inline bool pointOnSegment(point a, point b, point p) {
	return dot(vec(a, b), vec(a, p)) > -EPS && pointOnLine(a, b, p) && dot(vec(b, a), vec(b, p)) > -EPS;
}
STATE pointInPolygon(const vector<point>& p, const point &pnt) {
	point p2 = pnt + point(1, 0);
	int cnt = 0;
	for (int i = 0; i < sz(p); i++) {
		int j = (i + 1) % sz(p);
		if (pointOnSegment(p[i], p[j], pnt))
			return BOUNDRY;
		point r;
		intersect(pnt, p2, p[i], p[j], r);
		if (!pointOnRay(pnt, p2, r))
			continue;
		if (same(r, p[i]) || same(r, p[j]))
			if (fabs(r.Y - min(p[i].Y, p[j].Y)) < EPS)
				continue;
		if (!pointOnSegment(p[i], p[j], r))
			continue;   cnt++;
	}
	return cnt & 1 ? IN : OUT;
}
int dx[] = { 0,0,-1,1,-1,1,-1,1,0 };
int dy[] = { -1,1,0,0,-1,-1,1,1,0 };
const int N = 1e5 + 100; // don't forget that
const ll mod = 1e9 + 7;
ll s(ll n)
{
	ll ret = 0;
	while (n)
	{
		ret += (n % 10);
		n /= 10;
	}
	return ret;
}
int main() {
	fast_in_out();
	//cout << fixed << setprecision(4);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	pause();
	return 0;

}
